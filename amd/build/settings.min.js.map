{"version":3,"file":"settings.min.js","sources":["../src/settings.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @author    Guillermo Leon Alvarez Salamanca\n * @copyright Copyright (c) 2018 Open LMS (https://www.openlms.net)\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * JS code to test Drift connection in local_drift settings file.\n */\n\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/templates', 'local_drift/drift'],\n    function($, str, ModalFactory, Templates, drift) {\n        return {\n            init : function(clientKey) {\n\n                // Create button to test drift connection.\n                var div = $('#admin-clientkey');\n                var row = $('<div></div>').attr('class', 'form-setting');\n                var offset =  $('<div></div>').attr('class', 'form-select');\n                var button = $('<button>Test connection</button>').attr('id', 'drift_test_connection');\n                // Some styles and classes for boost theme.\n                if (div.hasClass('row')) {\n                    row.attr('class', 'row');\n                    offset.attr('class', 'offset-sm-3 col-sm-3');\n                    button.css('margin-bottom', '1em');\n                }\n                button.attr('class', 'btn btn-primary').attr('type', 'submit');\n                offset.append(button);\n                row.append(offset);\n\n                // Disable the button.\n                var disableButton = function(text) {\n                    $(button).attr('disabled', 'disabled');\n                    $(button).text(text);\n                };\n\n                // First bring the required stings for the button.\n                var strings = str.get_strings([\n                    {key: 'drift_testconnection', component: 'local_drift'},\n                    {key: 'drift_buttondisabled', component: 'local_drift'}\n                ]);\n\n                // Load button with the right string.\n                $.when(strings).done(function(localizedStrings) {\n                    // Selector of the client key input.\n                    var input = $('#id_s_local_drift_clientkey');\n\n                    // Check if user has stored the client key or not.\n                    if (input.val() == '') {\n                        disableButton(localizedStrings[1]);\n                    } else {\n                        button.text(localizedStrings[0]);\n                    }\n\n                    // Disabled button when a change occurs on the client key.\n                    $(input).on('input', function() {\n                        disableButton(localizedStrings[1]);\n                    });\n\n                });\n\n                // Strings for Modal.\n                var modalStrings = str.get_strings([\n                    {key: 'drift_testconnection', component: 'local_drift'},\n                    {key: 'drift_connection_verified', component: 'local_drift'},\n                    {key: 'drift_connection_fail', component: 'local_drift'}\n                ]);\n\n                var localizedModalStrings = [];\n\n                // Add the modal to DOM when the strings are ready.\n                $.when(modalStrings).done(function(localizedStrings) {\n                    localizedModalStrings = localizedStrings;\n                    ModalFactory.create({\n                        title: localizedStrings[0],\n                        body: Templates.render('local_drift/settings', {}),\n                        type: ModalFactory.types.DEFAULT\n                    }, button).done(function(){\n                        // Append button in the DOM.\n                        div.append(row);\n                    });\n                });\n\n                button.click(function(e) {\n                    e.preventDefault();\n                    setDefault();\n                    $('#drift_result').text('...');\n                    var s = drift.getScript(clientKey);\n                    if (M.cfg.behatsiterunning) {\n                        var path = M.cfg.wwwroot + '/local/drift/tests/fixtures/';\n                        s.src = (clientKey.trim() == 'right-password'.trim()) ? path + 'dummy-drift.js' : path + 'empty.js';\n                    }\n                    $.get(s.src).done(function() {\n                        whenTrue(modalExist, 20).then(function() {\n                            changeModal(true, localizedModalStrings[1]);\n                        });\n                        drift.testConnection(clientKey);\n                    }).fail(function () {\n                        whenTrue(modalExist, 20).then(function() {\n                            changeModal(false, localizedModalStrings[2]);\n                        });\n                    });\n                });\n\n                /**\n                 * Checks if the modal exists in the DOM\n                 * @returns {boolean}\n                 */\n                var modalExist = function() {\n                    return $('#drift_testing').length !== 0;\n                };\n\n                /**\n                 * Change modal class and texts.\n                 * @param {bool} status Response status\n                 * @param {string} string\n                 */\n                var changeModal = function(status, string) {\n                    swapClasses(status);\n                    $('#drift_result').text(string);\n                };\n\n                /**\n                 * Makes a JQuery promise to see if some element exists.\n                 * @param {function} evaluateFunction\n                 * @param {int} maxIterations\n                 * @returns {promise} JQuery promise\n                 */\n                var whenTrue = function(evaluateFunction, maxIterations) {\n                    maxIterations = !maxIterations ? 10 : maxIterations;\n\n                    var prom = $.Deferred();\n                    var i = 0;\n                    var checker = setInterval(function() {\n                        i = i + 1;\n                        if (i > maxIterations) {\n                            prom.reject();\n                            clearInterval(checker);\n                        } else {\n                            if (evaluateFunction()) {\n                                prom.resolve();\n                                clearInterval(checker);\n                            }\n                        }\n                    }, 1000);\n\n                    return prom.promise();\n                };\n\n                /**\n                 * Changes the class of the html element to match the response status.\n                 * @param {bool} status Response status\n                 */\n                var swapClasses = function(status) {\n                    var selector = '#drift_testing';\n                    if (status) {\n                        if ($(selector).hasClass('alert-warning')) {\n                            $(selector).removeClass(\"alert-warning\").addClass('alert-success');\n                        } else if ($(selector).hasClass('alert-danger')) {\n                            $(selector).removeClass(\"alert-danger\").addClass('alert-success');\n                        }\n                    } else {\n                        if ($(selector).hasClass('alert-warning')) {\n                            $(selector).removeClass(\"alert-warning\").addClass('alert-danger');\n                        } else if ($(selector).hasClass('alert-success')) {\n                            $(selector).removeClass(\"alert-success\").addClass('alert-danger');\n                        }\n                    }\n                };\n\n                /**\n                 * Set the default state for the modal\n                 */\n                var setDefault = function() {\n                    var selector = '#drift_testing';\n                    if ($(selector).hasClass('alert-success')) {\n                        $(selector).removeClass(\"alert-success\").addClass('alert-warning');\n                    } else if ($(selector).hasClass('alert-danger')) {\n                        $(selector).removeClass(\"alert-danger\").addClass('alert-warning');\n                    }\n                };\n            }\n\n        };\n});"],"names":["define","$","str","ModalFactory","Templates","drift","init","clientKey","div","row","attr","offset","button","hasClass","css","append","disableButton","text","strings","get_strings","key","component","when","done","localizedStrings","input","val","on","modalStrings","localizedModalStrings","create","title","body","render","type","types","DEFAULT","click","e","preventDefault","setDefault","s","getScript","M","cfg","behatsiterunning","path","wwwroot","src","trim","get","whenTrue","modalExist","then","changeModal","testConnection","fail","length","status","string","swapClasses","evaluateFunction","maxIterations","prom","Deferred","i","checker","setInterval","reject","clearInterval","resolve","promise","selector","removeClass","addClass"],"mappings":"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"}